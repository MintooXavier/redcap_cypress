const { defineConfig } = require("cypress")
const AdmZip = require('adm-zip')
const fs = require('fs')
const path = require('path')
const crypto = require('crypto')

module.exports = defineConfig({
    projectId: '6dw6bj',
    hideXHR: false,
    e2e: {
        projectRoot: __dirname,
        // We've imported your old cypress plugins here.
        // You may want to clean this up later by importing these.
        async setupNodeEvents(on, config) {
            require('rctf/plugins/index.js')(on, config)
            on('task', {
                // Task 1: Unzip a file
                unzipFile({ filepath }) {
                  let unzipDestination = 'cypress/downloads/unzipped'; // Destination directory for unzipped files
                  
                  if (!fs.existsSync(filepath)) {
                    return { success: false, message: `File not found: ${filepath}` }
                  }
    
                  try {
                    // Ensure the unzip destination exists
                    if (!fs.existsSync(unzipDestination)) {
                      fs.mkdirSync(unzipDestination, { recursive: true })
                    }
                                       
                    // Unzip the file
                    const zip = new AdmZip(filepath);
                    zip.extractAllTo(unzipDestination, true);
                    return { success: true, message: `Unzipped to ${unzipDestination}` };
                  } catch (error) {
                    return { success: false, message: `Error unzipping file: ${error.message}` };
                  }
                },
                
                // Task 2: Checks the Local storage location for the latest downloaded PDF file
                fetchLatestDownloadLocal({ fileExtension }) {
                  // Local storage location
                  // Change this according to the local storage settings
                  const downloadsDir = path.resolve(__dirname, '../../redcap_source/edocs')
    
                  try {
                    // Read files in the directory
                    const files = fs.readdirSync(downloadsDir);
        
                    // Filter files by extension
                    const filteredFiles = files.filter(file => path.extname(file) === `.${fileExtension}`);
        
                    // If no files are found, return an empty string
                    if (filteredFiles.length === 0) {
                      return '';
                    }
        
                    // Sort files by modification time and get the latest file
                    const latestFile = filteredFiles
                      .map(file => ({
                        file,
                        mtime: fs.statSync(path.join(downloadsDir, file)).mtime,
                      }))
                      .sort((a, b) => b.mtime - a.mtime)[0].file;
        
                    // Return the full path to the latest file
                    return path.join(downloadsDir, latestFile);
                  } catch (error) {
                    throw new Error(`Error fetching latest download: ${error.message}`);
                  }
                },
                // Task 3: Checks Hash file
                calculateFileHash({ filePath }) {
                  return new Promise((resolve, reject) => {
                    const algorithm = 'sha256'
                    const hash = crypto.createHash(algorithm)
                    const stream = fs.createReadStream(filePath)
        
                    stream.on('data', chunk => hash.update(chunk))
                    stream.on('end', () => resolve(hash.digest('hex')))
                    stream.on('error', reject)
                  })
                },
                // Task 4: Delete lines from the file as it contains timestamp or ID
                modifyFile({ filePath, fileType }) {
                  return new Promise((resolve, reject) => {
                    fs.readFile(filePath, 'utf8', (err, data) => {
                      if (err) return reject(`Error reading file: ${err.message}`);
        
                      // Split file into lines
                      const lines = data.split('\n');
                    
                      let updatedContent
                      // sas, sps, r, do files contain the corresponding csv file names within the files 
                      // csv filename is of the format filename_yyyy-mm-dd_hhmm.csv
                      // xml file contains filename and timestamp
                      // ics file contains UID and timestamp
                      // This causes the hash value to differ each time hence removing the csv file name from the file
                      if(fileType == 'ics') {
                        updatedContent = lines.filter((line) => !line.startsWith('UID') && !line.startsWith('DTSTAMP')).join('\n'); // delete lines starting with 'UID' and 'DTSTAMP' as UID and timestamp differ each time
                      }
                      else if (fileType == 'sas') {
                        updatedContent = lines.filter((line) => !line.startsWith('%let csv_file')).join('\n'); // delete lines starting with 'let csv_file' as the filename contains timestamp
                      }
                      else if (fileType == 'sps') {
                        updatedContent = lines.filter((line) => !line.startsWith('FILE HANDLE')).join('\n'); // delete lines starting with 'FILE HANDLE' as the filename contains timestamp
                      }
                      else if (fileType == 'r') {
                        updatedContent = lines.filter((line) => !line.startsWith('data')).join('\n'); // delete lines starting with 'data' as the filename contains timestamp
                      }
                      else if (fileType == 'do') {
                        updatedContent = lines.filter((line) => !line.startsWith('label data') && !line.startsWith('import delimited')).join('\n'); // delete lines starting with 'label data' and 'import delimited' as the filename contains timestamp
                      }
                      else if (fileType == 'xml') {
                        updatedContent = lines.filter((line) => !line.startsWith('<ODM xmlns') && !line.startsWith('<ClinicalData StudyOID')).join('\n'); // delete lines starting with '<ODM xmlns' and '<ClinicalData StudyOID' as the filename contains timestamp
                      }
    
                      // Write the modified content back to the file
                      fs.writeFile(filePath, updatedContent, 'utf8', writeErr => {
                        if (writeErr) return reject(`Error writing file: ${writeErr.message}`);
                        resolve('File Updated successfully');
                      })
                    })
                  })
                }
            })
            return config
        },
        baseUrl: 'https://localhost:8443',
        stepDefinitions: 'cypress/support/step_definitions',
        specPattern: [ 'cypress/features/*.feature',
                       'redcap_rsvc/*/[ABCDE]/*/*.feature',
                       '!redcap_rsvc/*/[ABCDE]/*/*REDUNDANT*.feature'
                     ],
        testIsolation: false,
        experimentalMemoryManagement: false,
        numTestsKeptInMemory: 0,
        retries: {
            runMode: 0,
            openMode: 0
        },
        video: true,
        videoCompression: false,
        trashAssetsBeforeRuns: true,
        viewportWidth: 1600,
        viewportHeight: 1200,
        defaultCommandTimeout: 60000,
        responseTimeout: 60000,
        requestTimeout: 60000,
        chromeWebSecurity: false,
        scrollBehavior: 'bottom',
        watchForFileChanges: true,
        redirectionLimit: 50
    },
})